name: Build and publish Demo VoD container image to GitHub Container Registry

on:
  push:
    branches:
      - main
    paths:
      - 'demo-vod/*'
      - '.github/workflows/deploy-oke-oci-cli-demo-vod.yml'
    workflow_dispatch:

env:
  IMAGE_NAME: demo-vod-streaming-app

jobs:
  push-build-image:
    name: Build and push VoD Demo container image
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      
      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u ${GITHUB_ACTOR,,} --password-stdin ghcr.io

      - name: Repository owner needs to be lowercase
        id: repo-owner
        run: |
          REPO_OWNER=${{ github.repository_owner }}
          echo "::set-output name=repo-owner::${REPO_OWNER,,}"

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m')"
      
      - name: Build image
        run: |
          cd demo-vod
          docker build --tag ghcr.io/${{ steps.repo-owner.outputs.repo-owner }}/$IMAGE_NAME:$TAG .
          docker tag ghcr.io/${{ steps.repo-owner.outputs.repo-owner }}/$IMAGE_NAME:$TAG ghcr.io/${{ steps.repo-owner.outputs.repo-owner }}/$IMAGE_NAME:latest
        env:
          TAG: ${{ steps.date.outputs.date }}

      - name: Push image to GitHub Container Registry
        run: |
          cd demo-vod
          docker push ghcr.io/${{ steps.repo-owner.outputs.repo-owner }}/$IMAGE_NAME:$TAG
          docker push ghcr.io/${{ steps.repo-owner.outputs.repo-owner }}/$IMAGE_NAME:latest
        env:
          TAG: ${{ steps.date.outputs.date }}    

  deploy-oci:
    name: Deploy VoD Demo in OCI
    needs: push-build-image
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    environment: OCI    
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    steps:
      - uses: actions/checkout@v2

      - name: Retrieve the OCID of a named compartment in tenancy
        uses: oracle-actions/run-oci-cli-command@v1.0
        id: find-compartment-id
        with:
          command: 'iam compartment list --compartment-id-in-subtree=true'
          query: "data[?name=='davega'].id"

      - name: Retrieve the ddl-table-name
        id: ddl-table-name
        run: |
          DDL_TABLE=$(cat demo-vod/demo-stream-acct.ddl)
          echo $DDL_TABLE
          echo "::set-output name=ddl-table-name::${DDL_TABLE,,}"

      - name: Retrieve the display name and table limits of the NoSQL tables in my compartment
        uses: oracle-actions/run-oci-cli-command@v1.0
        id: find-tables
        with:
          command: 'nosql table list --compartment-id ${{ steps.find-compartment-id.outputs.raw_output }}'
          query: 'data.items[*].{name:name,tlimits:\"table-limits\"}'

      - name: List the display name and table limits of the NoSQL tables in my compartment
        run: |
          echo ${{ steps.find-tables.outputs.output }} | jq .
          echo " ${{ steps.ddl-table-name.outputs.ddl-table-name  }} "


      - name: Configure Kubectl for Oracle Container Engine for Kubernetes (OKE)
        uses: oracle-actions/configure-kubectl-oke@v1.0
        id: configure-kubectl-oke-action
        with:
          cluster: ${{ secrets.OKE_CLUSTER_OCID }}        
      - name: Deploy oracle-app-ndcs-deployment and Get all resources
        run:  | 
          kubectl apply -f ./oracle-app-ndcs-deployment.yaml
          sleep 120
          kubectl get all 

